# ~/zeno/src/nbody/gspmodels/tests/SoftTests:

################################################################################
# Jaffe model tests: scale radius a = 0.04, mass M = 0.0625.

# TestJ01: Jaffe model with epsilon = 0.0025

testJ01: jaffe.dat jaffe_n01.dat jaffe_s01.dat jaffe_a01.dat
	$(MAKE) -f SoftTests grav_delta GRAV=jaffe_n01.dat \
	        SOFTMODEL=jaffe_s01.dat OUT=jaffe_s01_n01.txt
	$(MAKE) -f SoftTests grav_delta GRAV=jaffe_n01.dat \
	        SOFTMODEL=jaffe_a01.dat OUT=jaffe_a01_n01.txt

jaffe_n01.dat: jaffe.dat samp01.dat
	$(MAKE) -f SoftTests grav_eval SAMPLE=samp01.dat \
	        MODEL=jaffe.dat EPS=0.0025 OUT=jaffe_n01.dat

jaffe_s01.dat: jaffe_s01.txt
	modelgsp jaffe_s01.txt jaffe_s01.dat rtaper=4.0 mtot=0.0625

jaffe_a01.dat: jaffe.dat jaffe_n01.dat
	$(MAKE) -f SoftTests grav_fit MODEL=jaffe.dat OUT=jaffe_a01.dat \
	        GRAV=jaffe_n01.dat  EPSRANGE=0.001:0.006 COMP=jaffe \
	        FITACC=jaffe_a01_fitphi.txt FITPHI=jaffe_a01_fitacc.txt

# TestJ02: Jaffe model with epsilon = 0.000625

testJ02: jaffe.dat jaffe_n02.dat jaffe_s02.dat jaffe_a02.dat
	$(MAKE) -f SoftTests grav_delta GRAV=jaffe_n02.dat \
	        SOFTMODEL=jaffe_s02.dat OUT=jaffe_s02_n02.txt
	$(MAKE) -f SoftTests grav_delta GRAV=jaffe_n02.dat \
	        SOFTMODEL=jaffe_a02.dat OUT=jaffe_a02_n02.txt

jaffe_n02.dat: jaffe.dat samp02.dat
	$(MAKE) -f SoftTests grav_eval SAMPLE=samp02.dat \
	        MODEL=jaffe.dat EPS=0.000625 OUT=jaffe_n02.dat

jaffe_s02.dat: jaffe_s02.txt
	modelgsp jaffe_s02.txt jaffe_s02.dat rtaper=4.0 mtot=0.0625

jaffe_a02.dat: jaffe.dat jaffe_n02.dat
	$(MAKE) -f SoftTests grav_fit MODEL=jaffe.dat OUT=jaffe_a02.dat \
	        GRAV=jaffe_n02.dat  EPSRANGE=0.0004:0.0008 COMP=jaffe \
	        FITACC=jaffe_a02_fitphi.txt FITPHI=jaffe_a02_fitacc.txt

# jaffe.dat: Jaffe model tapered at rtaper = 4.0.
# Note: HUGE range helps insure good N-body representation at small radii.

jaffe.dat:
	gammagsp - 2.0 mtot=0.0625 a=0.04 rrange=1/4194304:32 npoint=865 | \
	  gsptrun - jaffe.dat rtrun=4.0

################################################################################
# Hernquist model tests: scale radius a = 0.04, mass M = 0.0625.

# TestH01: Hernquist model with epsilon = 0.0025

testH01: hernq.dat hernq_n01.dat hernq_s01.dat hernq_a01.dat
	$(MAKE) -f SoftTests grav_delta GRAV=hernq_n01.dat \
	        SOFTMODEL=hernq_s01.dat OUT=hernq_s01_n01.txt
	$(MAKE) -f SoftTests grav_delta GRAV=hernq_n01.dat \
	        SOFTMODEL=hernq_a01.dat OUT=hernq_a01_n01.txt

hernq_n01.dat: hernq.dat samp01.dat
	$(MAKE) -f SoftTests grav_eval SAMPLE=samp01.dat \
	        MODEL=hernq.dat EPS=0.0025 OUT=hernq_n01.dat

hernq_s01.dat: hernq_s01.txt
	modelgsp hernq_s01.txt hernq_s01.dat rtaper=4.0 mtot=0.0625

hernq_a01.dat: hernq.dat hernq_n01.dat
	$(MAKE) -f SoftTests grav_fit MODEL=hernq.dat OUT=hernq_a01.dat \
	        GRAV=hernq_n01.dat  EPSRANGE=0.001:0.006 COMP=hernq \
	        FITACC=hernq_a01_fitphi.txt FITPHI=hernq_a01_fitacc.txt

# TestH02: Hernquist model with epsilon = 0.000625

testH02: hernq.dat hernq_n02.dat hernq_s02.dat hernq_a02.dat
	$(MAKE) -f SoftTests grav_delta GRAV=hernq_n02.dat \
	        SOFTMODEL=hernq_s02.dat OUT=hernq_s02_n02.txt
	$(MAKE) -f SoftTests grav_delta GRAV=hernq_n02.dat \
	        SOFTMODEL=hernq_a02.dat OUT=hernq_a02_n02.txt

hernq_n02.dat: hernq.dat samp02.dat
	$(MAKE) -f SoftTests grav_eval SAMPLE=samp02.dat \
	        MODEL=hernq.dat EPS=0.000625 OUT=hernq_n02.dat

hernq_s02.dat: hernq_s02.txt
	modelgsp hernq_s02.txt hernq_s02.dat rtaper=4.0 mtot=0.0625

hernq_a02.dat: hernq.dat hernq_n02.dat
	$(MAKE) -f SoftTests grav_fit MODEL=hernq.dat OUT=hernq_a02.dat \
	        GRAV=hernq_n02.dat  EPSRANGE=0.0004:0.0008 COMP=hernq \
	        FITACC=hernq_a02_fitphi.txt FITPHI=hernq_a02_fitacc.txt

# hernq_tap.dat: Hernquist model tapered at rtaper = 4.0.

hernq.dat:
	gammagsp - 1.0 mtot=0.0625 a=0.04 rrange=1/4194304:32 npoint=865 | \
	  gsptrun - hernq.dat rtrun=4.0

################################################################################

# samp01.dat: sampling points for epsilon = 0.0025

samp01.dat:
	$(MAKE) -f SoftTests samp_points EPS=0.0025 OUT=samp01.dat

# samp02.dat: sampling points for epsilon = 0.000625

samp02.dat:
	$(MAKE) -f SoftTests samp_points EPS=0.000625 OUT=samp02.dat

# Generate sample points uniformly spaced in log r around value of epsilon.

SAMPSEED = 12345
SAMPPNTS = 4096

samp_points:
	makesnap out=- shape=shell speed=0 mass=0 \
	         nbody=$(SAMPPNTS) seed=$(SAMPSEED) | \
	  snapset in=- out=$(OUT) \
	          x="x * $(EPS) * rdex(-2.0 + (4.0 * i) / (n - 1))" \
	          y="y * $(EPS) * rdex(-2.0 + (4.0 * i) / (n - 1))" \
	          z="z * $(EPS) * rdex(-2.0 + (4.0 * i) / (n - 1))"

# Evaluate potential and acceleration at sample points.  Uses direct sum
# for accuracy - tree code introduces artifacts...

GRAVSEED = 54321
GRAVPNTS = 2097152
GRAVRAND = false

grav_eval: $(SAMPLE) $(MODEL)
	gsprealize gsp=$(MODEL) out=- randrad=$(GRAVRAND) \
	           nbody=$(GRAVPNTS) seed=$(GRAVSEED) | \
	  snapstack $(SAMPLE) - - | \
	    snapforce - $(OUT) nforce=$(SAMPPNTS) eps=$(EPS)

# New version gsprealize_gsl has more uniform random numbers; reduces
# radial bias when GRAVRAND=true.

grav_eval_gsl: $(SAMPLE) $(MODEL)
	gsprealize_gsl gsp=$(MODEL) out=- randrad=$(GRAVRAND) \
	           nbody=$(GRAVPNTS) seed=$(GRAVSEED) | \
	  snapstack $(SAMPLE) - - | \
	    snapforce - $(OUT) nforce=$(SAMPPNTS) eps=$(EPS)

# For comparison, here's a tree code version.  The overall bias in potential
# depends on theta but NOT on use of quad. moments...

GRAVTHETA = 0.8
GRAVQUAD  = false

grav_eval_tree: $(SAMPLE) $(MODEL)
	gsprealize gsp=$(MODEL) out=- randrad=$(GRAVRAND) \
	           nbody=$(GRAVPNTS) seed=$(GRAVSEED) | \
	  snapstack $(SAMPLE) - - | \
	    treecode - tmp1.dat tstop=0 eps=$(EPS) options=$(GRAVOPTS) \
	             theta=$(GRAVTHETA) usequad=$(GRAVQUAD) \
	             outputs=Mass,Position,Potential,Acceleration
	snapsift tmp1.dat $(OUT) sieve="m == 0"
	rm -f tmp1.dat

# Tried shifting the center; no significant effect on bias.

XOFF = 0.03141593
YOFF = 0.02718282
ZOFF = 0.05859875

grav_eval_tree_off: $(SAMPLE) $(MODEL)
	gsprealize gsp=$(MODEL) out=- randrad=$(GRAVRAND) \
	           nbody=$(GRAVPNTS) seed=$(GRAVSEED) | \
	  snapstack $(SAMPLE) - - | \
	    snapset - - x="x + $(XOFF)" y="y + $(YOFF)" z="z + $(ZOFF)" | \
	      treecode - tmp1.dat tstop=0 eps=$(EPS) \
	               theta=$(GRAVTHETA) usequad=$(GRAVQUAD) \
	               outputs=Mass,Position,Potential,Acceleration
	snapsift tmp1.dat - sieve="m == 0" | \
	  snapset - $(OUT) x="x - $(XOFF)" y="y - $(YOFF)" z="z - $(ZOFF)"
	rm -f tmp1.dat

########################################################################

NEPSILON = 161
KAPRANGE = 1.0:3.0

grav_fit: $(MODEL) $(GRAV)
	gspsmoothfit $(MODEL) $(GRAV) neps=$(NEPSILON) \
	             eps=$(EPSRANGE) kappa=$(KAPRANGE) zerophi=true > $(FITPHI)
	gspsmoothfit $(MODEL) $(GRAV) neps=$(NEPSILON) \
	             eps=$(EPSRANGE) kappa=$(KAPRANGE) zerophi=false > $(FITACC)
	gawk '{ if (NR>1) print $0}' $(FITACC) | \
	  join -o 0,1.2,2.2 $(FITPHI) - | \
	    gawk '{ \
	      if (NR>1) { \
	        eps1 = eps2; kap1f = kap2f; kap1a = kap2a; \
              } \
	      eps2 = $$1; kap2f = $$2; kap2a = $$3; \
	      if (NR>1 && kap1f>kap1a && kap2f<kap2a) { \
	        deleps = eps2 - eps1; \
	        eps = eps1 + deleps * (kap1f - kap1a) / \
	                      ((kap2a - kap1a) - (kap2f - kap1f)); \
	        kap_f = kap1f + (eps-eps1) * (kap2f-kap1f) / deleps; \
	        kap_a = kap1a + (eps-eps1) * (kap2a-kap1a) / deleps; \
	        printf("gspsmooth %s %s eps=%f kappa=%f\n", \
	               "$(MODEL)", "$(OUT)", eps, kap_f, kap_a); \
	      } \
	    }' | sh

ETARANGE=0.5:2.5

grav_fitX: $(MODEL) $(GRAV)
	gspsmoothfit2 $(MODEL) $(GRAV) \
	             neps=$(NEPSILON) eps=$(EPSRANGE) eta=$(ETARANGE) \
	             zerophi=true > $(FITPHI)
	gspsmoothfit2 $(MODEL) $(GRAV) \
	             neps=$(NEPSILON) eps=$(EPSRANGE) eta=$(ETARANGE) \
	             zerophi=false > $(FITACC)
	gawk '{ if (NR>1) print $0}' $(FITACC) | \
	  join -o 0,1.2,2.2 $(FITPHI) - | \
	    gawk '{ \
	      if (NR>1) { \
	        eps1 = eps2; eta1f = eta2f; eta1a = eta2a; \
              } \
	      eps2 = $$1; eta2f = $$2; eta2a = $$3; \
	      if (NR>1 && eta1f>eta1a && eta2f<eta2a) { \
	        deleps = eps2 - eps1; \
	        eps = eps1 + deleps * (eta1f - eta1a) / \
	                      ((eta2a - eta1a) - (eta2f - eta1f)); \
	        eta_f = eta1f + (eps-eps1) * (eta2f-eta1f) / deleps; \
	        eta_a = eta1a + (eps-eps1) * (eta2a-eta1a) / deleps; \
	        printf("%8s:  eps=%f eta=%f (=%f)\n", \
	               "$(COMP)", eps, eta_f, eta_a); \
	      } \
	    }'

grav_delta: $(SOFTMODEL) $(GRAV)
	gspeval $(SOFTMODEL) $(GRAV) - \
	        option=phi | \
	  snapset - - produce=AuxVec auxvx=aux auxvy=0 auxvz=0 | \
	    gspeval $(SOFTMODEL) - - option=mass | \
	      snapset - - aux=r auxvy="phi - auxvx" \
	              auxvz="dotvp(pos,acc)/r + aux/(r*r)" | \
	        snaplist - auxhead=Radius,Phi,DeltaPhi,DeltaAcc \
	                 fields=Aux,AuxVec rfmt=" %11.4e" > $(OUT)
