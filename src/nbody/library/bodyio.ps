%!PS-Adobe-3.0
%%BoundingBox: 38 24 574 768
%%Title: Enscript Output
%%For: Joshua Barnes
%%Creator: GNU enscript 1.6.4
%%CreationDate: Mon Dec 24 06:00:11 2012
%%Orientation: Landscape
%%Pages: (atend)
%%DocumentMedia: Letter 612 792 0 () ()
%%DocumentNeededResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset Enscript-Prolog 1.6 4
%
% Procedures.
%

/_S {	% save current state
  /_s save def
} def
/_R {	% restore from saved state
  _s restore
} def

/S {	% showpage protecting gstate
  gsave
  showpage
  grestore
} bind def

/MF {	% fontname newfontname -> -	make a new encoded font
  /newfontname exch def
  /fontname exch def

  /fontdict fontname findfont def
  /newfont fontdict maxlength dict def

  fontdict {
    exch
    dup /FID eq {
      % skip FID pair
      pop pop
    } {
      % copy to the new font dictionary
      exch newfont 3 1 roll put
    } ifelse
  } forall

  newfont /FontName newfontname put

  % insert only valid encoding vectors
  encoding_vector length 256 eq {
    newfont /Encoding encoding_vector put
  } if

  newfontname newfont definefont pop
} def

/MF_PS { % fontname newfontname -> -	make a new font preserving its enc
  /newfontname exch def
  /fontname exch def

  /fontdict fontname findfont def
  /newfont fontdict maxlength dict def

  fontdict {
    exch
    dup /FID eq {
      % skip FID pair
      pop pop
    } {
      % copy to the new font dictionary
      exch newfont 3 1 roll put
    } ifelse
  } forall

  newfont /FontName newfontname put

  newfontname newfont definefont pop
} def

/SF { % fontname width height -> -	set a new font
  /height exch def
  /width exch def

  findfont
  [width 0 0 height 0 0] makefont setfont
} def

/SUF { % fontname width height -> -	set a new user font
  /height exch def
  /width exch def

  /F-gs-user-font MF
  /F-gs-user-font width height SF
} def

/SUF_PS { % fontname width height -> -	set a new user font preserving its enc
  /height exch def
  /width exch def

  /F-gs-user-font MF_PS
  /F-gs-user-font width height SF
} def

/M {moveto} bind def
/s {show} bind def

/Box {	% x y w h -> -			define box path
  /d_h exch def /d_w exch def /d_y exch def /d_x exch def
  d_x d_y  moveto
  d_w 0 rlineto
  0 d_h rlineto
  d_w neg 0 rlineto
  closepath
} def

/bgs {	% x y height blskip gray str -> -	show string with bg color
  /str exch def
  /gray exch def
  /blskip exch def
  /height exch def
  /y exch def
  /x exch def

  gsave
    x y blskip sub str stringwidth pop height Box
    gray setgray
    fill
  grestore
  x y M str s
} def

/bgcs { % x y height blskip red green blue str -> -  show string with bg color
  /str exch def
  /blue exch def
  /green exch def
  /red exch def
  /blskip exch def
  /height exch def
  /y exch def
  /x exch def

  gsave
    x y blskip sub str stringwidth pop height Box
    red green blue setrgbcolor
    fill
  grestore
  x y M str s
} def

% Highlight bars.
/highlight_bars {	% nlines lineheight output_y_margin gray -> -
  gsave
    setgray
    /ymarg exch def
    /lineheight exch def
    /nlines exch def

    % This 2 is just a magic number to sync highlight lines to text.
    0 d_header_y ymarg sub 2 sub translate

    /cw d_output_w cols div def
    /nrows d_output_h ymarg 2 mul sub lineheight div cvi def

    % for each column
    0 1 cols 1 sub {
      cw mul /xp exch def

      % for each rows
      0 1 nrows 1 sub {
        /rn exch def
        rn lineheight mul neg /yp exch def
        rn nlines idiv 2 mod 0 eq {
	  % Draw highlight bar.  4 is just a magic indentation.
	  xp 4 add yp cw 8 sub lineheight neg Box fill
	} if
      } for
    } for

  grestore
} def

% Line highlight bar.
/line_highlight {	% x y width height gray -> -
  gsave
    /gray exch def
    Box gray setgray fill
  grestore
} def

% Column separator lines.
/column_lines {
  gsave
    .1 setlinewidth
    0 d_footer_h translate
    /cw d_output_w cols div def
    1 1 cols 1 sub {
      cw mul 0 moveto
      0 d_output_h rlineto stroke
    } for
  grestore
} def

% Column borders.
/column_borders {
  gsave
    .1 setlinewidth
    0 d_footer_h moveto
    0 d_output_h rlineto
    d_output_w 0 rlineto
    0 d_output_h neg rlineto
    closepath stroke
  grestore
} def

% Do the actual underlay drawing
/draw_underlay {
  ul_style 0 eq {
    ul_str true charpath stroke
  } {
    ul_str show
  } ifelse
} def

% Underlay
/underlay {	% - -> -
  gsave
    0 d_page_h translate
    d_page_h neg d_page_w atan rotate

    ul_gray setgray
    ul_font setfont
    /dw d_page_h dup mul d_page_w dup mul add sqrt def
    ul_str stringwidth pop dw exch sub 2 div ul_h_ptsize -2 div moveto
    draw_underlay
  grestore
} def

/user_underlay {	% - -> -
  gsave
    ul_x ul_y translate
    ul_angle rotate
    ul_gray setgray
    ul_font setfont
    0 0 ul_h_ptsize 2 div sub moveto
    draw_underlay
  grestore
} def

% Page prefeed
/page_prefeed {		% bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} def

% Wrapped line markers
/wrapped_line_mark {	% x y charwith charheight type -> -
  /type exch def
  /h exch def
  /w exch def
  /y exch def
  /x exch def

  type 2 eq {
    % Black boxes (like TeX does)
    gsave
      0 setlinewidth
      x w 4 div add y M
      0 h rlineto w 2 div 0 rlineto 0 h neg rlineto
      closepath fill
    grestore
  } {
    type 3 eq {
      % Small arrows
      gsave
        .2 setlinewidth
        x w 2 div add y h 2 div add M
        w 4 div 0 rlineto
        x w 4 div add y lineto stroke

        x w 4 div add w 8 div add y h 4 div add M
        x w 4 div add y lineto
	w 4 div h 8 div rlineto stroke
      grestore
    } {
      % do nothing
    } ifelse
  } ifelse
} def

% EPSF import.

/BeginEPSF {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack
  userdict begin
  /showpage { } def
  0 setgray 0 setlinecap
  1 setlinewidth 0 setlinejoin
  10 setmiterlimit [ ] 0 setdash newpath
  /languagelevel where {
    pop languagelevel
    1 ne {
      false setstrokeadjust false setoverprint
    } if
  } if
} bind def

/EndEPSF {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse
%%EndResource
%%BeginResource: procset Enscript-Encoding-88591 1.6 4
/encoding_vector [
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/space        	/exclam       	/quotedbl     	/numbersign   	
/dollar       	/percent      	/ampersand    	/quoteright   	
/parenleft    	/parenright   	/asterisk     	/plus         	
/comma        	/hyphen       	/period       	/slash        	
/zero         	/one          	/two          	/three        	
/four         	/five         	/six          	/seven        	
/eight        	/nine         	/colon        	/semicolon    	
/less         	/equal        	/greater      	/question     	
/at           	/A            	/B            	/C            	
/D            	/E            	/F            	/G            	
/H            	/I            	/J            	/K            	
/L            	/M            	/N            	/O            	
/P            	/Q            	/R            	/S            	
/T            	/U            	/V            	/W            	
/X            	/Y            	/Z            	/bracketleft  	
/backslash    	/bracketright 	/asciicircum  	/underscore   	
/quoteleft    	/a            	/b            	/c            	
/d            	/e            	/f            	/g            	
/h            	/i            	/j            	/k            	
/l            	/m            	/n            	/o            	
/p            	/q            	/r            	/s            	
/t            	/u            	/v            	/w            	
/x            	/y            	/z            	/braceleft    	
/bar          	/braceright   	/tilde        	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/space        	/exclamdown   	/cent         	/sterling     	
/currency     	/yen          	/brokenbar    	/section      	
/dieresis     	/copyright    	/ordfeminine  	/guillemotleft	
/logicalnot   	/hyphen       	/registered   	/macron       	
/degree       	/plusminus    	/twosuperior  	/threesuperior	
/acute        	/mu           	/paragraph    	/bullet       	
/cedilla      	/onesuperior  	/ordmasculine 	/guillemotright	
/onequarter   	/onehalf      	/threequarters	/questiondown 	
/Agrave       	/Aacute       	/Acircumflex  	/Atilde       	
/Adieresis    	/Aring        	/AE           	/Ccedilla     	
/Egrave       	/Eacute       	/Ecircumflex  	/Edieresis    	
/Igrave       	/Iacute       	/Icircumflex  	/Idieresis    	
/Eth          	/Ntilde       	/Ograve       	/Oacute       	
/Ocircumflex  	/Otilde       	/Odieresis    	/multiply     	
/Oslash       	/Ugrave       	/Uacute       	/Ucircumflex  	
/Udieresis    	/Yacute       	/Thorn        	/germandbls   	
/agrave       	/aacute       	/acircumflex  	/atilde       	
/adieresis    	/aring        	/ae           	/ccedilla     	
/egrave       	/eacute       	/ecircumflex  	/edieresis    	
/igrave       	/iacute       	/icircumflex  	/idieresis    	
/eth          	/ntilde       	/ograve       	/oacute       	
/ocircumflex  	/otilde       	/odieresis    	/divide       	
/oslash       	/ugrave       	/uacute       	/ucircumflex  	
/udieresis    	/yacute       	/thorn        	/ydieresis    	
] def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Courier
/HFpt_w 10 def
/HFpt_h 10 def
/Courier-Bold /HF-gs-font MF
/HF /HF-gs-font findfont [HFpt_w 0 0 HFpt_h 0 0] makefont def
/Courier /F-gs-font MF
/F-gs-font 7 7 SF
/#copies 1 def
% Pagedevice definitions:
gs_languagelevel 1 gt {
  <<
    /PageSize [612 792] 
  >> setpagedevice
} if
%%BeginResource: procset Enscript-Header-simple 1.6 4

/do_header {	% print default simple header
  gsave
    d_header_x d_header_y HFpt_h 3 div add translate

    HF setfont
    user_header_p {
      5 0 moveto user_header_left_str show

      d_header_w user_header_center_str stringwidth pop sub 2 div
      0 moveto user_header_center_str show

      d_header_w user_header_right_str stringwidth pop sub 5 sub
      0 moveto user_header_right_str show
    } {
      5 0 moveto fname show
      45 0 rmoveto fmodstr show
      45 0 rmoveto pagenumstr show
    } ifelse

  grestore
} def
%%EndResource
/d_page_w 744 def
/d_page_h 536 def
/d_header_x 0 def
/d_header_y 521 def
/d_header_w 744 def
/d_header_h 15 def
/d_footer_x 0 def
/d_footer_y 0 def
/d_footer_w 744 def
/d_footer_h 0 def
/d_output_w 744 def
/d_output_h 521 def
/cols 2 def
%%EndSetup
%%Page: (1) 1
%%BeginPageSetup
_S
90 rotate
24 -574 translate
/pagenum 1 def
/fname (bodyio.c) def
/fdir () def
/ftail (bodyio.c) def
% User defined strings:
/fmodstr (Mon Dec 24 05:59:57 2012) def
/pagenumstr (1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 511 M
(/*) s
5 503 M
( * bodyio.c: Input/Output code for phat body arrays.) s
5 495 M
( */) s
5 479 M
(#include "stdinc.h") s
5 471 M
(#include "filestruct.h") s
5 463 M
(#include "vectdefs.h") s
5 455 M
(#include "phatbody.h") s
5 447 M
(#include "getparam.h") s
5 439 M
(#include <string.h>) s
5 423 M
(local void put_parameters\(stream, int *, real *\);) s
5 415 M
(local void put_particles\(stream, bodyptr *, int *, string *\);) s
5 399 M
(local void get_parameters\(stream, int *, real *\);) s
5 391 M
(local void add_known_fields\(stream\);) s
5 383 M
(local void get_particles\(stream, bodyptr *, int *, string *\);) s
5 367 M
(local void set_mask\(int *, int, int, int\);) s
5 351 M
(//  put_snap: write snapshot to structured output stream.) s
5 343 M
(//  -----------------------------------------------------) s
5 327 M
(void put_snap\(stream ostr, bodyptr *btab, int *nbody, real *tnow,) s
5 319 M
(              string *tags\)) s
5 311 M
({) s
5 303 M
(  put_set\(ostr, SnapShotTag\);) s
5 295 M
(  put_parameters\(ostr, nbody, tnow\);) s
5 287 M
(  if \(*nbody > 0\)) s
5 279 M
(    put_particles\(ostr, btab, nbody, tags\);) s
5 271 M
(  put_tes\(ostr, SnapShotTag\);) s
5 263 M
(}) s
5 247 M
(//  put_parameters: write snapshot parameters.) s
5 239 M
(//  ------------------------------------------) s
5 223 M
(local void put_parameters\(stream ostr, int *nbody, real *tnow\)) s
5 215 M
({) s
5 207 M
(  put_set\(ostr, ParametersTag\);) s
5 199 M
(  put_data\(ostr, NBodyTag, IntType, nbody, 0\);) s
5 191 M
(  put_data\(ostr, TimeTag, RealType, tnow, 0\);) s
5 183 M
(  put_tes\(ostr, ParametersTag\);) s
5 175 M
(}) s
377 503 M
(//  put_particles: write particle data to output file.) s
377 495 M
(//  --------------------------------------------------) s
377 479 M
(local void put_particles\(stream ostr, bodyptr *btab, int *nbody,) s
377 471 M
(                         string *tags\)) s
377 463 M
({) s
377 455 M
(  string *tp, type;) s
377 447 M
(  ps_field *pbf;) s
377 439 M
(  int mask[32];) s
377 423 M
(  put_set\(ostr, ParticlesTag\);) s
377 415 M
(  for \(tp = tags; *tp != NULL; tp++\) {          // loop over list of tags) s
377 407 M
(    for \(pbf = phatbody; pbf->name != NULL; pbf++\)) s
377 399 M
(      if \(streq\(pbf->name, *tp\)\)                // look for name in struct) s
377 391 M
(        break;) s
377 383 M
(    if \(pbf->name == NULL\)) s
377 375 M
(      error\("put_particles: field %s unknown\\n", *tp\);) s
377 367 M
(    if \(pbf->offset == BadOffset\)) s
377 359 M
(      error\("put_particles: field %s undefined\\n", *tp\);) s
377 351 M
(    set_mask\(mask, SizeofBody, pbf->offset, type_length\(pbf->type\)\);) s
377 343 M
(    type = type_base\(pbf->type\);                // get base type of datum) s
377 335 M
(    if \(strlen\(pbf->type\) == 1\)) s
377 327 M
(      put_data_masked\(ostr, *tp, type, *btab, *nbody, 0, mask\);) s
377 319 M
(    else) s
377 311 M
(      put_data_masked\(ostr, *tp, type, *btab, *nbody, NDIM, 0, mask\);) s
377 303 M
(  }) s
377 295 M
(  put_tes\(ostr, ParticlesTag\);) s
377 287 M
(}) s
377 271 M
(//  get_snap: read snapshot from structured input stream.) s
377 263 M
(//  -----------------------------------------------------) s
377 247 M
(bool get_snap\(stream istr, bodyptr *btab, int *nbody, real *tnow,) s
377 239 M
(              string *tags, bool expand\)) s
377 231 M
({) s
377 223 M
(  int nbody0;) s
377 207 M
(  if \(get_tag_ok\(istr, SnapShotTag\)\) {) s
377 199 M
(    get_set\(istr, SnapShotTag\);) s
377 191 M
(    if \(*btab != NULL\)) s
377 183 M
(      nbody0 = *nbody;                          // save previous value) s
377 175 M
(    get_parameters\(istr, nbody, tnow\);) s
377 167 M
(    if \(expand && *btab == NULL\)                // don't expand after alloc) s
377 159 M
(      add_known_fields\(istr\);) s
377 151 M
(    if \(*btab != NULL && *nbody > nbody0\) {     // not enough room for bodies?) s
377 143 M
(      eprintf\("[%s.get_snap: WARNING: deallocating old body array]\\n",) s
377 135 M
(              getprog\(\)\);) s
377 127 M
(      free\(*btab\);) s
377 119 M
(      *btab = NULL;                             // trigger array reallocation) s
377 111 M
(    }) s
377 103 M
(    if \(*nbody > 0\)) s
377 95 M
(      get_particles\(istr, btab, nbody, tags\);) s
377 87 M
(    get_tes\(istr, SnapShotTag\);) s
377 79 M
(    return \(TRUE\);) s
377 71 M
(  } else) s
377 63 M
(    return \(FALSE\);    ) s
377 55 M
(}) s
_R
S
%%Page: (2) 2
%%BeginPageSetup
_S
90 rotate
24 -574 translate
/pagenum 2 def
/fname (bodyio.c) def
/fdir () def
/ftail (bodyio.c) def
% User defined strings:
/fmodstr (Mon Dec 24 05:59:57 2012) def
/pagenumstr (2) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 503 M
(#ifndef TimeFuzz) s
5 495 M
(#  define TimeFuzz  0.001               /* uncertainty in time comparison   */) s
5 487 M
(#endif) s
5 471 M
(//  get_snap_t: read snapshot in time range from structured input stream.) s
5 463 M
(//  ---------------------------------------------------------------------) s
5 447 M
(bool get_snap_t\(stream istr, bodyptr *btab, int *nbody, real *tnow,) s
5 439 M
(                string *tags, bool expand, string times\)) s
5 431 M
({) s
5 423 M
(  bool success = FALSE;) s
5 415 M
(  int nbody1;) s
5 407 M
(  real tnow1;) s
5 391 M
(  while \(! success && get_tag_ok\(istr, SnapShotTag\)\) {) s
5 383 M
(    get_set\(istr, SnapShotTag\);) s
5 375 M
(    get_parameters\(istr, &nbody1, &tnow1\);) s
5 367 M
(    if \(streq\(times, "all"\) || within\(tnow1, times, TimeFuzz\)\) {) s
5 359 M
(      if \(expand && *btab == NULL\)              // don't expand after alloc) s
5 351 M
(        add_known_fields\(istr\);) s
5 343 M
(      if \(*btab != NULL && nbody1 > *nbody\) {   // not enough room for bodies?) s
5 335 M
(        eprintf\("[%s.get_snap_t: WARNING: deallocating old body array]\\n",) s
5 327 M
(                getprog\(\)\);) s
5 319 M
(        free\(*btab\);) s
5 311 M
(        *btab = NULL;                           // trigger array reallocation) s
5 303 M
(      }) s
5 295 M
(      *nbody = nbody1;) s
5 287 M
(      *tnow = tnow1;) s
5 279 M
(      if \(*nbody > 0\)) s
5 271 M
(        get_particles\(istr, btab, nbody, tags\);) s
5 263 M
(      success = TRUE;) s
5 255 M
(    }) s
5 247 M
(    get_tes\(istr, SnapShotTag\);) s
5 239 M
(  }) s
5 231 M
(  return \(success\);) s
5 223 M
(}) s
5 207 M
(//  get_parameters: read snapshot parameters.) s
5 199 M
(//  -----------------------------------------) s
5 183 M
(local void get_parameters\(stream istr, int *nbody, real *tnow\)) s
5 175 M
({) s
5 167 M
(  get_set\(istr, ParametersTag\);) s
5 159 M
(  if \(get_tag_ok\(istr, NBodyTag\)\)) s
5 151 M
(    get_data\(istr, NBodyTag, IntType, nbody, 0\);) s
5 143 M
(  else if \(get_tag_ok\(istr, NobjTag\)\)) s
5 135 M
(    get_data\(istr, NobjTag, IntType, nbody, 0\);) s
5 127 M
(  else) s
5 119 M
(    error\("get_snap: need %s or %s in %s\\n",) s
5 111 M
(          NBodyTag, NobjTag, ParametersTag\);) s
5 103 M
(  if \(get_tag_ok\(istr, TimeTag\)\)) s
5 95 M
(    get_data\(istr, TimeTag, RealType, tnow, 0\);) s
5 87 M
(  else {) s
5 79 M
(    *tnow = 0.0;) s
5 71 M
(    eprintf\("[%s.get_snap: time defaults to zero]\\n", getprog\(\)\);) s
5 63 M
(  }) s
5 55 M
(  get_tes\(istr, ParametersTag\);) s
5 47 M
(}) s
377 503 M
(//  add_known_fields: add all known body fields present in input set.) s
377 495 M
(//  -----------------------------------------------------------------) s
377 479 M
(local void add_known_fields\(stream istr\)) s
377 471 M
({) s
377 463 M
(  string *tp, tags[MaxBodyFields];) s
377 455 M
(  ps_field *pbf;) s
377 447 M
(  ) s
377 439 M
(  get_set\(istr, ParticlesTag\);) s
377 431 M
(  tp = tags;) s
377 423 M
(  for \(pbf = phatbody; pbf->name != NULL; pbf++\)) s
377 415 M
(    if \(get_tag_ok\(istr, pbf->name\)\)) s
377 407 M
(      *tp++ = pbf->name;) s
377 399 M
(  *tp = NULL;) s
377 391 M
(  get_tes\(istr, ParticlesTag\);) s
377 383 M
(  layout_body\(tags, Precision, NDIM\);) s
377 375 M
(}) s
377 359 M
(//  get_particles: read particle data from input file.) s
377 351 M
(//  --------------------------------------------------) s
377 335 M
(local void get_particles\(stream istr, bodyptr *btab, int *nbody,) s
377 327 M
(                         string *tags\)) s
377 319 M
({) s
377 311 M
(  string *tp, type;) s
377 303 M
(  int len, mask[32];) s
377 295 M
(  ps_field *pbf;) s
377 279 M
(  if \(*btab == NULL\) {) s
377 271 M
(    *btab = \(bodyptr\) allocate\(*nbody * SizeofBody\);) s
377 263 M
(    eprintf\("[%s.get_snap: allocating %d bodies \(size %d bytes\)]\\n",) s
377 255 M
(            getprog\(\), *nbody, SizeofBody\);) s
377 247 M
(  }) s
377 239 M
(  get_set\(istr, ParticlesTag\);) s
377 231 M
(  tp = tags;) s
377 223 M
(  if \(get_tag_ok\(istr, PhaseTag\) &&) s
377 215 M
(      PosField.offset != BadOffset && VelField.offset != BadOffset\) {) s
377 207 M
(    len = type_length\(PosField.type\);) s
377 199 M
(    if \(VelField.offset - PosField.offset != len\)) s
377 191 M
(      error\("get_particles: %s and %s not contiguous", PosTag, VelTag\);) s
377 183 M
(    set_mask\(mask, SizeofBody, PosField.offset, 2 * len\);) s
377 175 M
(    type = type_base\(PosField.type\);) s
377 167 M
(    get_data_masked\(istr, PhaseTag, type, *btab, *nbody, 2, NDIM, 0, mask\);) s
377 159 M
(    *tp++ = PosTag;) s
377 151 M
(    *tp++ = VelTag;) s
377 143 M
(  }) s
377 135 M
(  for \(pbf = phatbody; pbf->name != NULL; pbf++\)) s
377 127 M
(    if \(get_tag_ok\(istr, pbf->name\) && pbf->offset != BadOffset\) {) s
377 119 M
(      set_mask\(mask, SizeofBody, pbf->offset, type_length\(pbf->type\)\);) s
377 111 M
(      type = type_base\(pbf->type\);) s
377 103 M
(      if \(strlen\(pbf->type\) == 1\)) s
377 95 M
(        get_data_masked\(istr, pbf->name, type, *btab, *nbody, 0, mask\);) s
377 87 M
(      else) s
377 79 M
(        get_data_masked\(istr, pbf->name, type, *btab, *nbody, NDIM, 0, mask\);) s
377 71 M
(      *tp++ = pbf->name;) s
377 63 M
(    }) s
377 55 M
(  *tp = NULL;) s
377 47 M
(  get_tes\(istr, ParticlesTag\);) s
377 39 M
(}) s
_R
S
%%Page: (3) 3
%%BeginPageSetup
_S
90 rotate
24 -574 translate
/pagenum 3 def
/fname (bodyio.c) def
/fdir () def
/ftail (bodyio.c) def
% User defined strings:
/fmodstr (Mon Dec 24 05:59:57 2012) def
/pagenumstr (3) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 503 M
(//  set_mask: initialize byte mask for field.) s
5 495 M
(//  -----------------------------------------) s
5 479 M
(local void set_mask\(int *mask, int size, int offset, int length\)) s
5 471 M
({) s
5 463 M
(  int i;) s
5 447 M
(  i = 0;) s
5 439 M
(  if \(offset > 0\)) s
5 431 M
(    mask[i++] = -offset;                        // skip preceding stuff) s
5 423 M
(  mask[i++] = length;                           // copy field itself) s
5 415 M
(  mask[i++] = -\(size - offset - length\);        // skip rest of structure) s
5 407 M
(  mask[i] = 0;) s
5 399 M
(}) s
_R
S
%%Trailer
%%Pages: 3
%%DocumentNeededResources: font Courier-Bold Courier 
%%EOF
